# main.py

from fastapi import FastAPI, Request
from fastapi.responses import FileResponse
import uvicorn
import logging
import os
from dotenv import load_dotenv

# LangChain imports
from langchain.utilities import SerpAPIWrapper
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

# Document generation
from docx import Document

# Email sending via SendGrid
from sendgrid import SendGridAPIClient
from sendgrid.helpers.mail import Mail, Attachment, FileContent, FileName, FileType, Disposition
import base64

# 1️⃣ Load environment variables
load_dotenv()

# 2️⃣ Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# 3️⃣ Initialize FastAPI
app = FastAPI()

# 4️⃣ Initialize SerpAPI and a chat-model LLM
serp = SerpAPIWrapper(serpapi_api_key=os.getenv("SERPAPI_API_KEY"))
llm = ChatOpenAI(
    model_name="gpt-4",
    temperature=0,
    openai_api_key=os.getenv("OPENAI_API_KEY"),
    max_tokens=2048
)

# 5️⃣ Query-refinement chains
template_a = PromptTemplate(
    input_variables=["problem_text"],
    template=(
        "You are a search query generator. Given a user-provided problem description, "
        "produce a concise search query to find publicly available statistics illustrating "
        "the scale and urgency of the problem.\n\n"
        "Problem Description:\n{problem_text}\n\nSearch Query:"
    )
)
chain_a = LLMChain(llm=llm, prompt=template_a)

template_b = PromptTemplate(
    input_variables=["solution_text"],
    template=(
        "You are a search query generator. Given a product/solution description, "
        "produce a concise search query to find the market addressed, market size, "
        "and key trends.\n\n"
        "Product/Solution Description:\n{solution_text}\n\nSearch Query:"
    )
)
chain_b = LLMChain(llm=llm, prompt=template_b)

template_c = PromptTemplate(
    input_variables=["features_text"],
    template=(
        "You are a search query generator. Given unique features of a product, "
        "produce a concise search query to find companies offering similar features "
        "and assess the degree of novelty.\n\n"
        "Unique Features:\n{features_text}\n\nSearch Query:"
    )
)
chain_c = LLMChain(llm=llm, prompt=template_c)

template_d = PromptTemplate(
    input_variables=["features_text"],
    template=(
        "You are a search query generator. Given unique features of a product, "
        "produce a concise search query to find revenue streams generated by competitors "
        "for similar products.\n\n"
        "Unique Features:\n{features_text}\n\nSearch Query:"
    )
)
chain_d = LLMChain(llm=llm, prompt=template_d)

# 6️⃣ Analysis chains
analysis_template_a = PromptTemplate(
    input_variables=["problem_text","search_results"],
    template=(
        "You are an expert grant writer. Draft a 1500–2000 character analysis titled 'The problem/market opportunity'.\n\n"
        "Use the user’s problem description:\n{problem_text}\n\n"
        "And these search results (statistics/snippets):\n{search_results}\n\n"
        "Substantiate with concrete statistics illustrating scale and urgency. Do NOT truncate mid-sentence."
    )
)
analysis_chain_a = LLMChain(llm=llm, prompt=analysis_template_a)

analysis_template_b = PromptTemplate(
    input_variables=["solution_text","search_results","trl","features_text"],
    template=(
        "Draft a 1500–2000 character analysis titled 'The innovation: Solution/Product or Services (USP)'.\n\n"
        "1. Why the product is better than existing solutions (use: {search_results}).\n"
        "2. Current Technology Readiness Level: {trl}, including validation/certification details if available.\n"
        "3. Why now is the right time to bring the product to market.\n\n"
        "Do NOT truncate mid-sentence."
    )
)
analysis_chain_b = LLMChain(llm=llm, prompt=analysis_template_b)

analysis_template_c = PromptTemplate(
    input_variables=["solution_text","search_results","revenue_model","features_text"],
    template=(
        "Draft a 1500–2000 character analysis titled 'Market and Competition analysis'.\n\n"
        "1. Market size and key trends (use: {search_results}).\n"
        "2. Product potential to transform or create a market.\n"
        "3. Business model and envisioned revenue streams: {revenue_model}.\n"
        "4. Why unique features ({features_text}) will convince clients to buy.\n"
        "5. Advantages and disadvantages and why this product will likely succeed.\n\n"
        "Do NOT truncate mid-sentence."
    )
)
analysis_chain_c = LLMChain(llm=llm, prompt=analysis_template_c)

analysis_template_d = PromptTemplate(
    input_variables=["solution_text","search_results"],
    template=(
        "Draft a 1500–2000 character analysis titled 'Broad impacts'.\n\n"
        "Discuss potential societal, environmental, or climate impacts and estimated job creation. Use: {search_results}.\n\n"
        "Do NOT truncate mid-sentence."
    )
)
analysis_chain_d = LLMChain(llm=llm, prompt=analysis_template_d)

analysis_template_e = PromptTemplate(
    input_variables=["solution_text","revenue_model","trl"],
    template=(
        "Draft a 1500–2000 character analysis titled 'Funding rationale and MVP'.\n\n"
        "Explain why raising funding is nearly impossible at TRL {trl}, why building an MVP is crucial, "
        "and include any funding history if provided. Use: revenue model {revenue_model}.\n\n"
        "Do NOT truncate mid-sentence."
    )
)
analysis_chain_e = LLMChain(llm=llm, prompt=analysis_template_e)

@app.post("/webhook")
async def receive_form(request: Request):
    payload = await request.json()
    questions = payload.get("submission", {}).get("questions", [])

    # 7️⃣ Extract form inputs + user email
    solution = questions[0].get("value", "") if len(questions) > 0 else ""
    problem = questions[1].get("value", "") if len(questions) > 1 else ""
    unique_feature = questions[2].get("value", "") if len(questions) > 2 else ""
    current_trl = questions[3].get("value", "") if len(questions) > 3 else ""
    revenue_model = questions[4].get("value", "") if len(questions) > 4 else ""
    user_email = questions[5].get("value", "") if len(questions) > 5 else ""
    logger.info("Inputs: %s | %s | %s | %s | %s | Email: %s", solution, problem, unique_feature, current_trl, revenue_model, user_email)

    # 8️⃣ Perform queries and gather snippets
    query_a = chain_a.run(problem_text=problem)
    snippets_a = "\n".join(serp.run(query_a)[:5])

    query_b = chain_b.run(solution_text=solution)
    snippets_b = "\n".join(serp.run(query_b)[:5])

    query_c = chain_c.run(features_text=unique_feature)
    snippets_c = "\n".join(serp.run(query_c)[:5])

    query_d = chain_d.run(features_text=unique_feature)
    snippets_d = "\n".join(serp.run(query_d)[:5])

    # 9️⃣ Generate analyses
    analysis_a = analysis_chain_a.run(problem_text=problem, search_results=snippets_a)
    analysis_b = analysis_chain_b.run(solution_text=solution, search_results=snippets_b, trl=current_trl, features_text=unique_feature)
    analysis_c = analysis_chain_c.run(solution_text=solution, search_results=snippets_b, revenue_model=revenue_model, features_text=unique_feature)
    analysis_d = analysis_chain_d.run(solution_text=solution, search_results=snippets_d)
    analysis_e = analysis_chain_e.run(solution_text=solution, revenue_model=revenue_model, trl=current_trl)

    # 10️⃣ Compile into Word document
    doc = Document()
    for title, content in [
        ("The problem/market opportunity", analysis_a),
        ("The innovation: Solution/Product or Services (USP)", analysis_b),
        ("Market and Competition analysis", analysis_c),
        ("Broad impacts", analysis_d),
        ("Funding rationale and MVP", analysis_e)
    ]:
        doc.add_heading(title, level=1)
        doc.add_paragraph(content)
    output_filename = "analyses.docx"
    doc.save(output_filename)
    logger.info("Document saved to %s", output_filename)

    # 11️⃣ Email the document as attachment
    with open(output_filename, "rb") as f:
        encoded = base64.b64encode(f.read()).decode()
    message = Mail(
        from_email=os.getenv("SENDGRID_SENDER"),
        to_emails=user_email,
        subject="Your AI-generated analyses",
        html_content="<p>Please find attached your analyses document.</p>"
    )
    attachment = Attachment(
        FileContent(encoded),
        FileName(output_filename),
        FileType("application/vnd.openxmlformats-officedocument.wordprocessingml.document"),
        Disposition("attachment")
    )
    message.attachment = attachment
    sg = SendGridAPIClient(os.getenv("SENDGRID_API_KEY"))
    response = sg.send(message)
    logger.info("Email sent status: %s", response.status_code)

    # 12️⃣ Return download and email status
    return {"status": "ok", "email_status": response.status_code}

@app.get("/download")
async def download_document():
    return FileResponse(path=os.path.join(os.getcwd(), "analyses.docx"), filename="analyses.docx", media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)), log_level="info")